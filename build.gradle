plugins {
  id 'application'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
  id 'org.springframework.boot' version '2.0.4.RELEASE'
  id 'org.jetbrains.kotlin.jvm' version '1.3.20'
  id "org.jetbrains.kotlin.plugin.jpa" version "1.3.20"
  id "org.jetbrains.kotlin.plugin.spring" version "1.3.20"
  id 'com.github.johnrengelman.shadow' version '4.0.3'
  // id 'com.moowork.node' version "1.3.1" // Doesn't work with gradle under version 5 
  id "com.github.node-gradle.node" version "2.2.0"
}

group = 'com.backend'
version = '1.0.0-SNAPSHOT'

repositories {
  mavenCentral()
  jcenter()
}

ext {
  kotlinVersion = '1.3.20'
  vertxVersion = '3.8.4'
  junitJupiterEngineVersion = '5.4.0'
}

application {
  mainClassName = 'io.vertx.core.Launcher'
}

node {
  version = "12.8.1"
  npmVersion = "6.13.0"
  yarnVersion = '1.19.1'
  download = true
  nodeModulesDir = file("src/main/frontend")
}

def mainVerticleName = 'com.backend.starter.MainVerticle'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

dependencies {
  implementation "io.vertx:vertx-web:$vertxVersion"
  implementation "io.vertx:vertx-mongo-client:$vertxVersion"
  implementation "io.vertx:vertx-lang-kotlin:$vertxVersion"
  implementation "org.springframework.boot:spring-boot-starter"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"
  testImplementation "io.vertx:vertx-junit5:$vertxVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
}

compileKotlin {
  kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
  kotlinOptions.jvmTarget = '1.8'
}

shadowJar {
  classifier = 'fat'
  manifest {
    attributes 'Main-Verticle': mainVerticleName
  }
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
}

tasks.create("buildFrontend", YarnTask) {
  setArgs(["run", "build"])
  dependsOn("yarn_install")
}

tasks.create("copyToWebRoot", Copy) {
  from("src/main/frontend/build")
  destinationDir = file("${buildDir}/classes/kotlin/main/webroot")
  dependsOn("buildFrontend")
}

tasks.named("processResources", ProcessResources) {
  // Classes calls this and it goes in a loop
  dependsOn("copyToWebRoot")
}

run {
  args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}
